/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ToysLegendDonationInterface extends ethers.utils.Interface {
  functions: {
    'busd()': FunctionFragment;
    'changeMaxNumberOfDonators(uint256)': FunctionFragment;
    'changeMinimunContribution(uint256)': FunctionFragment;
    'donors(address)': FunctionFragment;
    'getBalance()': FunctionFragment;
    'isDonator(address)': FunctionFragment;
    'makeDonation(uint256)': FunctionFragment;
    'maxNumberOfDonators()': FunctionFragment;
    'minimunContribution()': FunctionFragment;
    'numberOfDonators()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'returnOwnerToWhitelist()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'whitelist()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'busd', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'changeMaxNumberOfDonators',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'changeMinimunContribution',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'donors', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getBalance',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'isDonator', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'makeDonation',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxNumberOfDonators',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'minimunContribution',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'numberOfDonators',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'returnOwnerToWhitelist',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'whitelist', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'busd', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'changeMaxNumberOfDonators',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeMinimunContribution',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'donors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDonator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'makeDonation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxNumberOfDonators',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minimunContribution',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numberOfDonators',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'returnOwnerToWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;

  events: {
    'AddedToDonors(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddedToDonors'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type AddedToDonorsEvent = TypedEvent<[string] & { account: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ToysLegendDonation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ToysLegendDonationInterface;

  functions: {
    busd(overrides?: CallOverrides): Promise<[string]>;

    changeMaxNumberOfDonators(
      newMaxNumberOfDonators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinimunContribution(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDonator(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    makeDonation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxNumberOfDonators(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimunContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfDonators(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnOwnerToWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;
  };

  busd(overrides?: CallOverrides): Promise<string>;

  changeMaxNumberOfDonators(
    newMaxNumberOfDonators: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinimunContribution(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isDonator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  makeDonation(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxNumberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

  minimunContribution(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnOwnerToWhitelist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    busd(overrides?: CallOverrides): Promise<string>;

    changeMaxNumberOfDonators(
      newMaxNumberOfDonators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinimunContribution(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isDonator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    makeDonation(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxNumberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

    minimunContribution(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnOwnerToWhitelist(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddedToDonors(address)'(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    AddedToDonors(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    busd(overrides?: CallOverrides): Promise<BigNumber>;

    changeMaxNumberOfDonators(
      newMaxNumberOfDonators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinimunContribution(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isDonator(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    makeDonation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxNumberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

    minimunContribution(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfDonators(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnOwnerToWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMaxNumberOfDonators(
      newMaxNumberOfDonators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinimunContribution(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDonator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeDonation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxNumberOfDonators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimunContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfDonators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnOwnerToWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
